generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

model Student {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  password          String?              
  firstName         String
  lastName          String
  birthDay          String
  address           String
  phone             String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  interests         String[]
  course            Course[]
  ReservationCourse ReservationCourse[]
}

model Category {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  CategoriesOnPosts CategoriesOnCourses[]
  Course            Course[]
}

model Teacher {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  password       String?
  firstName      String
  lastName       String
  birthDay       DateTime
  address        String
  phone          String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  interests      String[]
  organisationId Int?
  Organisation   Organisation? @relation(fields: [organisationId], references: [id])
  course         Course[]
}

model Course {
  id                Int                 @id @default(autoincrement())
  title             String
  content           String?
  published         Boolean?            @default(false)
  authorId          Int
  studentId         Int?
  author            Teacher             @relation(fields: [authorId], references: [id])
  Student           Student?            @relation(fields: [studentId], references: [id])
  CategoriesOnCourses CategoriesOnCourses[]
  ReservationCourse ReservationCourse[]
  category          Category[]
}

model CategoriesOnCourses {
  courseId   Int
  categoryId Int
  assignedAt DateTime @default(now())
  assignedBy String
  category   Category @relation(fields: [categoryId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])

  @@id([courseId, categoryId])
}

model Organisation {
  id        Int       @id @default(autoincrement())
  name      String
  address   String
  phone     String
  email     String
  website   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  teachers  Teacher[]
}

model Promotion {
  id        Int      @id @default(autoincrement())
  promocode String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id                Int                @id @default(autoincrement())
  status            Status             @default(PENDING)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  ReservationCourse ReservationCourse?
}

model ReservationCourse {
  id        Int      @id @default(autoincrement())
  paymentId Int      @unique
  courseId  Int
  studentId Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  payment   Payment  @relation(fields: [paymentId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

enum Status {
  SUCCESS
  FAILED
  PENDING
}
