// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

model Student {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  firstName         String
  lastName          String
  birthDay          DateTime
  address           String
  phone             String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  interests         String?
  course            Course[]
  ReservationCourse ReservationCourse[]
}

model Category {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Course            Course[]
  CategoriesOnPosts CategoriesOnPosts[]
}

model Teacher {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  firstName      String
  lastName       String
  birthDay       DateTime
  address        String
  phone          String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  interests      String?
  course         Course[]
  Organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId Int?
}

model Course {
  id                Int                 @id @default(autoincrement())
  title             String
  content           String?
  published         Boolean?            @default(false)
  author            Teacher             @relation(fields: [authorId], references: [id])
  authorId          Int
  category          Category[]
  Student           Student?            @relation(fields: [studentId], references: [id])
  studentId         Int?
  CategoriesOnPosts CategoriesOnPosts[]
  ReservationCourse ReservationCourse[]
}

model CategoriesOnPosts {
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([courseId, categoryId])
}

model Organisation {
  id        Int       @id @default(autoincrement())
  name      String
  address   String
  phone     String
  email     String
  website   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  teachers  Teacher[]
}

model Promotion {
  id        Int      @id @default(autoincrement())
  promocode String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id                Int                 @id @default(autoincrement())
  status            Status              @default(PENDING)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ReservationCourse ReservationCourse?
}

model ReservationCourse {
  id        Int      @id @default(autoincrement())
  payment   Payment  @relation(fields: [paymentId], references: [id])
  paymentId Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  SUCCESS
  FAILED
  PENDING
}
