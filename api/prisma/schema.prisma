generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  password          String?
  description       String?
  firstName         String
  lastName          String
  birthDay          String
  address           String
  phone             String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  interests         String[]
  organisationId    Int?
  Organisation      Organisation?       @relation(fields: [organisationId], references: [id])
  ReservationCourse ReservationCourse[]
  Course            Course[]
  role              Role               
}

model Category {
  id                Int                   @id @default(autoincrement())
  name              String
  description       String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  CategoriesOnPosts CategoriesOnCourses[]
  Course            Course[]
}

model Course {
  id                  Int                   @id @default(autoincrement())
  title               String
  startDate           DateTime
  date                DateTime
  price               Float
  place               String
  image               String?
  description         String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  authorId            Int
  author              User?                 @relation(fields: [authorId], references: [id])
  CategoriesOnCourses CategoriesOnCourses[]
  ReservationCourse   ReservationCourse[]
  category            Category[]
}

model CategoriesOnCourses {
  courseId   Int
  categoryId Int
  assignedAt DateTime @default(now())
  assignedBy String
  category   Category @relation(fields: [categoryId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])

  @@id([courseId, categoryId])
}

model Organisation {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  phone     String
  email     String
  website   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teachers  User[]
}

model Promotion {
  id        Int      @id @default(autoincrement())
  promocode String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id                Int                @id @default(autoincrement())
  status            Status             @default(PENDING)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  ReservationCourse ReservationCourse?
}

model ReservationCourse {
  id        Int      @id @default(autoincrement())
  paymentId Int      @unique
  courseId  Int
  userId    Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  payment   Payment  @relation(fields: [paymentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum Status {
  SUCCESS
  FAILED
  PENDING
}

enum Role {
  TEACHER
  STUDENT
}
