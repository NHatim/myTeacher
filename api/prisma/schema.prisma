generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  password          String?
  completeName      String
  birthDay          String
  address           String
  phone             String
  IBAN              String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  interests         String[]
  ReservationCourse ReservationCourse[]
  Course            Course[]
  role              Role
  Review            Review[]
  Refunds           Refunds[]
}



model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]
}

model Course {
  id                Int                 @id @default(autoincrement())
  title             String
  dateHour          String[]
  price             Float
  address           String
  placesMax         Int
  currentPlaces     Int
  image             String
  description       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  authorId          Int
  author            User?               @relation(fields: [authorId], references: [id])
  categoryId        Int
  category          Category?           @relation(fields: [categoryId], references: [id])
  reviews           Review[]
  ReservationCourse ReservationCourse[]
  Refunds           Refunds[]
}

model ReservationCourse {
  id        Int      @id @default(autoincrement())
  paymentId String   @unique
  courseId  Int
  userId    Int
  attended  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  paidbyadmin Boolean @default(false)
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  content   String
  rating    Int
}

model Refunds {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  reason    String
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
}
