generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  password          String?
  description       String?
  completeName      String
  birthDay          String
  address           String
  phone             String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  interests         String[]
  organisationId    Int?
  Organisation      Organisation?       @relation(fields: [organisationId], references: [id])
  ReservationCourse ReservationCourse[]
  Course            Course[]
  role              Role
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String
  courses Course[]
}

model Course {
  id                Int                 @id @default(autoincrement())
  title             String
  startDate         String
  startHour         String
  endHour           String
  price             Float
  address           String
  placesMax         Int
  currentPlaces     Int
  image             String
  description       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  authorId          Int
  author            User?               @relation(fields: [authorId], references: [id])
  categoryId        Int
  category          Category?           @relation(fields: [categoryId], references: [id])
  ReservationCourse ReservationCourse[]
}

model Organisation {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  phone     String
  email     String
  website   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teachers  User[]
}

model Promotion {
  id        Int      @id @default(autoincrement())
  promocode String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReservationCourse {
  id        Int      @id @default(autoincrement())
  paymentId String   @unique
  courseId  Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum Status {
  SUCCESS
  FAILED
  PENDING
}

enum Role {
  TEACHER
  STUDENT
}
